#!/usr/bin/env python3
"""
Standalone runner for the Complete Solution Engine
"""

import sys
import os
import json
import argparse
from datetime import datetime

# Add current directory to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Import components with proper error handling
try:
    from complete_solution_implementation import CompleteSolutionEngine
    from domain_knowledge_base import DomainKnowledgeBase
    from code_generation_templates import CodeGenerationTemplates
    from auto_agent_generator import AutoAgentGenerator
    print("✅ All components loaded successfully!")
except ImportError as e:
    print(f"❌ Import error: {e}")
    print("Make sure all files are in the current directory")
    sys.exit(1)


def run_complete_solution(description: str, output_dir: str = None, verify_only: bool = False):
    """Run the Complete Solution Engine"""
    
    print(f"\n🚀 vibe.ai Complete Solution Engine")
    print("=" * 70)
    print(f"\n📝 Project: {description}")
    print(f"📁 Output: {output_dir or 'verification only'}")
    print("\n" + "=" * 70)
    
    # Create engine
    engine = CompleteSolutionEngine()
    
    # Phase 1: Understanding
    print("\n🧠 Phase 1: Deep Understanding...")
    understanding = engine.understanding_engine.understand(description)
    
    print(f"\n✨ Understood:")
    print(f"  • Explicit requirements: {len(understanding.explicit_requirements)}")
    print(f"  • Implicit requirements: {len(understanding.implicit_requirements)}")
    print(f"  • Security requirements: {len(understanding.security_requirements)}")
    print(f"  • Architectural patterns: {len(understanding.architectural_patterns)}")
    
    # Show some implicit requirements
    print(f"\n🔍 Sample implicit requirements:")
    for req in understanding.implicit_requirements[:5]:
        print(f"  • {req}")
    if len(understanding.implicit_requirements) > 5:
        print(f"  • ... and {len(understanding.implicit_requirements) - 5} more")
    
    # Phase 2: Analysis
    print("\n\n🔍 Phase 2: Project Analysis...")
    context = engine.project_analyzer.analyze(".")
    
    print(f"\n📊 Current project state:")
    print(f"  • Architecture style: {context.architecture.get('style', 'not detected')}")
    print(f"  • Languages found: {', '.join(context.tech_stack.get('languages', [])) or 'none'}")
    print(f"  • Performance optimizations: {sum(context.performance_profile.values())} detected")
    
    # Phase 3: Gap Analysis
    print("\n\n🌉 Phase 3: Gap Analysis...")
    gaps = engine.gap_bridger.identify_gaps(understanding, context)
    
    print(f"\n⚠️  Found {len(gaps)} gaps:")
    for i, gap in enumerate(gaps[:5], 1):
        print(f"  {i}. {gap.type}: {gap.description}")
    if len(gaps) > 5:
        print(f"  ... and {len(gaps) - 5} more")
    
    if verify_only:
        print("\n\n✅ Verification complete! (no files generated)")
        return
    
    # Phase 4: Solution Blueprint
    print("\n\n📋 Phase 4: Creating Solution Blueprint...")
    blueprint = engine._create_blueprint(understanding, gaps, context)
    
    print(f"\n🏗️  Solution: {blueprint.name}")
    print(f"  • Architecture: {blueprint.architecture['style']}")
    print(f"  • Technologies:")
    for category, tech in blueprint.architecture['technologies'].items():
        if tech:
            print(f"    - {category}: {tech}")
    
    # Phase 5: Implementation
    if output_dir:
        print(f"\n\n⚙️  Phase 5: Generating Implementation...")
        print(f"  📁 Output directory: {output_dir}")
        
        # Note: Full file generation would happen here
        # For now, we'll create a summary file
        os.makedirs(output_dir, exist_ok=True)
        
        summary = {
            "project_name": blueprint.name,
            "description": description,
            "generated_at": datetime.now().isoformat(),
            "architecture": blueprint.architecture,
            "features": blueprint.features,
            "implementation_plan": blueprint.implementation_plan,
            "gaps_identified": len(gaps),
            "implicit_requirements": len(understanding.implicit_requirements),
            "security_requirements": len(understanding.security_requirements)
        }
        
        with open(os.path.join(output_dir, "solution-summary.json"), 'w') as f:
            json.dump(summary, f, indent=2)
        
        # Create README
        readme_content = f"""# {blueprint.name}

## Generated by vibe.ai Complete Solution Engine

### Description
{description}

### Architecture
- **Style**: {blueprint.architecture['style']}
- **Frontend**: {blueprint.architecture['technologies'].get('frontend', 'N/A')}
- **Backend**: {blueprint.architecture['technologies'].get('backend', 'N/A')}
- **Database**: {blueprint.architecture['technologies'].get('database', 'N/A')}

### Features
{chr(10).join(f"- {feature}" for category in blueprint.features.values() for feature in category[:3])}

### Generated Structure
```
{output_dir}/
├── solution-summary.json
├── README.md
└── [Full implementation would include all services, tests, configs, etc.]
```

### Next Steps
1. Review the solution blueprint
2. Run the full implementation generator
3. Execute: `docker-compose up`
4. Access: http://localhost:8000

---
Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        
        with open(os.path.join(output_dir, "README.md"), 'w') as f:
            f.write(readme_content)
        
        print(f"\n✅ Solution summary created in {output_dir}")
        print(f"   • solution-summary.json - Complete blueprint")
        print(f"   • README.md - Project overview")
    
    print("\n\n🎉 Complete Solution Engine finished!")
    print(f"\n💡 What happened:")
    print(f"  • Understood {len(understanding.implicit_requirements)} implicit requirements")
    print(f"  • Identified {len(gaps)} gaps to bridge")
    print(f"  • Designed {blueprint.architecture['style']} architecture")
    print(f"  • Selected optimal technology stack")
    print(f"  • Created implementation blueprint")
    
    if not output_dir:
        print(f"\n💡 To generate files, run with output directory:")
        print(f"   python3 {sys.argv[0]} \"{description}\" -o my-project")


def main():
    parser = argparse.ArgumentParser(
        description="vibe.ai Complete Solution Engine - Generate complete solutions from descriptions"
    )
    
    parser.add_argument(
        "description",
        help="Natural language description of what to build"
    )
    
    parser.add_argument(
        "-o", "--output",
        default=None,
        help="Output directory for generated solution"
    )
    
    parser.add_argument(
        "--verify-only",
        action="store_true",
        help="Only analyze and verify, don't generate files"
    )
    
    args = parser.parse_args()
    
    try:
        run_complete_solution(
            args.description,
            args.output,
            args.verify_only
        )
    except KeyboardInterrupt:
        print("\n\n⚠️  Interrupted by user")
    except Exception as e:
        print(f"\n\n❌ Error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()