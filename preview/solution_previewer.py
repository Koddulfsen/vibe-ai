#!/usr/bin/env python3
"""
Solution Preview Engine for vibe.ai
Shows users exactly what will be created before building
"""

import os
import sys
import json
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from pathlib import Path
import tempfile

try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.tree import Tree
    from rich.syntax import Syntax
    from rich.markdown import Markdown
    from rich.table import Table
    from rich.columns import Columns
    from rich.prompt import Prompt, Confirm
    from rich import box
    from rich.text import Text
    RICH_AVAILABLE = True
    console = Console()
except ImportError:
    RICH_AVAILABLE = False
    console = None


class FilePreview:
    """Represents a file that will be created"""
    def __init__(self, path: str, content: str, description: str = "", 
                 file_type: str = "code", size_estimate: int = 0):
        self.path = path
        self.content = content
        self.description = description
        self.file_type = file_type
        self.size_estimate = size_estimate or len(content)
        
    def get_language(self) -> str:
        """Get syntax highlighting language from file extension"""
        ext_map = {
            '.py': 'python',
            '.js': 'javascript',
            '.ts': 'typescript',
            '.jsx': 'javascript',
            '.tsx': 'typescript',
            '.json': 'json',
            '.yml': 'yaml',
            '.yaml': 'yaml',
            '.md': 'markdown',
            '.sh': 'bash',
            '.dockerfile': 'dockerfile',
            '.sql': 'sql',
            '.html': 'html',
            '.css': 'css'
        }
        
        ext = Path(self.path).suffix.lower()
        return ext_map.get(ext, 'text')


class SolutionPreviewer:
    """Preview what vibe.ai will create before building"""
    
    def __init__(self):
        self.file_previews = []
        self.project_structure = {}
        self.statistics = {}
        self.tech_stack = []
        self.features = []
        
    def analyze_task(self, task_description: str) -> Dict[str, Any]:
        """Analyze task and generate preview data"""
        task_lower = task_description.lower()
        
        # Determine project type and generate appropriate preview
        if "api" in task_lower or "rest" in task_lower:
            return self._preview_api_project(task_description)
        elif "react" in task_lower or "frontend" in task_lower:
            return self._preview_frontend_project(task_description)
        elif "cli" in task_lower:
            return self._preview_cli_project(task_description)
        else:
            return self._preview_general_project(task_description)
    
    def _preview_api_project(self, task_description: str) -> Dict[str, Any]:
        """Generate preview for API project"""
        self.tech_stack = ["FastAPI", "SQLAlchemy", "PostgreSQL", "Docker"]
        self.features = [
            "RESTful API endpoints",
            "Database models and migrations",
            "Authentication system",
            "API documentation",
            "Docker deployment",
            "Comprehensive testing"
        ]
        
        # Generate file previews
        self.file_previews = [
            FilePreview(
                "src/main.py",
                '''"""
Main FastAPI application
Generated by vibe.ai
"""

from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session

from . import models, schemas, crud, auth
from .database import get_db, engine

# Create database tables
models.Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="Generated API",
    description="API generated by vibe.ai",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def read_root():
    """Root endpoint"""
    return {"message": "API is running", "version": "1.0.0"}

@app.post("/users/", response_model=schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    """Create a new user"""
    db_user = crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return crud.create_user(db=db, user=user)

# More endpoints would be generated...
''',
                "Main application entry point with FastAPI setup"
            ),
            FilePreview(
                "src/models.py",
                '''"""
Database models
Generated by vibe.ai
"""

from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

from .database import Base


class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    items = relationship("Item", back_populates="owner")


class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String, index=True)
    owner_id = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    owner = relationship("User", back_populates="items")
''',
                "SQLAlchemy database models"
            ),
            FilePreview(
                "docker-compose.yml",
                '''version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/appdb
    depends_on:
      - db
    volumes:
      - ./src:/app/src

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=appdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  postgres_data:
''',
                "Docker Compose configuration for easy deployment"
            ),
            FilePreview(
                "requirements.txt",
                '''fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-multipart==0.0.6
pydantic==2.5.0
alembic==1.12.1
pytest==7.4.3
pytest-asyncio==0.21.1
httpx==0.25.2
''',
                "Python dependencies"
            ),
            FilePreview(
                "README.md",
                '''# Generated API

Built with vibe.ai - AI-powered development assistant

## Features

- RESTful API with FastAPI
- PostgreSQL database with SQLAlchemy ORM
- JWT authentication
- Docker deployment ready
- Comprehensive test suite
- Auto-generated API documentation

## Quick Start

1. **Using Docker (Recommended):**
   ```bash
   docker-compose up
   ```

2. **Local Development:**
   ```bash
   pip install -r requirements.txt
   python -m uvicorn src.main:app --reload
   ```

3. **Access the API:**
   - API: http://localhost:8000
   - Docs: http://localhost:8000/docs
   - ReDoc: http://localhost:8000/redoc

## Project Structure

```
.
├── src/
│   ├── main.py          # FastAPI application
│   ├── models.py        # Database models
│   ├── schemas.py       # Pydantic schemas
│   ├── crud.py          # CRUD operations
│   ├── auth.py          # Authentication
│   └── database.py      # Database configuration
├── tests/               # Test suite
├── alembic/            # Database migrations
├── docker-compose.yml  # Docker configuration
├── Dockerfile          # Container definition
└── requirements.txt    # Dependencies
```

## Development

Run tests:
```bash
pytest
```

Create migration:
```bash
alembic revision --autogenerate -m "Description"
alembic upgrade head
```

## API Endpoints

- `GET /` - Health check
- `POST /users/` - Create user
- `POST /token` - Login
- `GET /users/me` - Get current user
- More endpoints...

---
Generated with ❤️ by vibe.ai
''',
                "Comprehensive documentation",
                "documentation"
            )
        ]
        
        self._build_project_structure()
        self._calculate_statistics()
        
        return {
            "preview_generated": True,
            "files": self.file_previews,
            "structure": self.project_structure,
            "statistics": self.statistics,
            "tech_stack": self.tech_stack,
            "features": self.features
        }
    
    def _preview_frontend_project(self, task_description: str) -> Dict[str, Any]:
        """Generate preview for frontend project"""
        self.tech_stack = ["React", "TypeScript", "Tailwind CSS", "Vite"]
        self.features = [
            "Modern React with hooks",
            "TypeScript for type safety",
            "Tailwind CSS styling",
            "Component library",
            "Routing setup",
            "State management"
        ]
        
        self.file_previews = [
            FilePreview(
                "src/App.tsx",
                '''import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { Layout } from './components/Layout';
import { Home } from './pages/Home';
import { Dashboard } from './pages/Dashboard';
import { AuthProvider } from './contexts/AuthContext';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Layout>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/dashboard" element={<Dashboard />} />
          </Routes>
        </Layout>
      </Router>
    </AuthProvider>
  );
}

export default App;
''',
                "Main React application component"
            ),
            FilePreview(
                "src/components/Button.tsx",
                '''import React from 'react';
import { clsx } from 'clsx';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  className,
  children,
  ...props
}) => {
  const baseClasses = 'font-medium rounded-lg transition-colors focus:outline-none focus:ring-2';
  
  const variants = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500'
  };
  
  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-base',
    lg: 'px-6 py-3 text-lg'
  };
  
  return (
    <button
      className={clsx(baseClasses, variants[variant], sizes[size], className)}
      {...props}
    >
      {children}
    </button>
  );
};
''',
                "Reusable button component with Tailwind"
            ),
            FilePreview(
                "package.json",
                '''{
  "name": "vibe-react-app",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "vitest",
    "lint": "eslint src --ext ts,tsx"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.20.0",
    "axios": "^1.6.2",
    "clsx": "^2.0.0",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.6",
    "typescript": "^5.2.2",
    "vite": "^5.0.8",
    "vitest": "^1.0.4"
  }
}
''',
                "Package configuration with modern tooling"
            )
        ]
        
        self._build_project_structure()
        self._calculate_statistics()
        
        return {
            "preview_generated": True,
            "files": self.file_previews,
            "structure": self.project_structure,
            "statistics": self.statistics,
            "tech_stack": self.tech_stack,
            "features": self.features
        }
    
    def _preview_cli_project(self, task_description: str) -> Dict[str, Any]:
        """Generate preview for CLI project"""
        self.tech_stack = ["Python", "Click", "Rich", "Poetry"]
        self.features = [
            "Multi-command CLI structure",
            "Beautiful terminal output",
            "Configuration management",
            "Plugin system",
            "Progress bars",
            "Auto-completion"
        ]
        
        self.file_previews = [
            FilePreview(
                "src/cli.py",
                '''#!/usr/bin/env python3
"""
CLI Tool
Generated by vibe.ai
"""

import click
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn

from .commands import init, process, export
from .config import load_config
from .__version__ import __version__

console = Console()


@click.group()
@click.version_option(version=__version__)
@click.option('--config', '-c', type=click.Path(), help='Config file path')
@click.pass_context
def cli(ctx, config):
    """A powerful CLI tool built with vibe.ai"""
    ctx.ensure_object(dict)
    ctx.obj['config'] = load_config(config)
    ctx.obj['console'] = console


@cli.command()
@click.argument('path', type=click.Path())
@click.option('--force', '-f', is_flag=True, help='Force initialization')
def init(path, force):
    """Initialize a new project"""
    with console.status("Initializing project...", spinner="dots"):
        # Implementation here
        pass
    console.print("[green]✓[/green] Project initialized successfully!")


@cli.command()
@click.argument('files', nargs=-1, type=click.Path(exists=True))
@click.option('--parallel', '-p', is_flag=True, help='Process in parallel')
def process(files, parallel):
    """Process files with progress tracking"""
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    ) as progress:
        task = progress.add_task("Processing files...", total=len(files))
        for file in files:
            # Process file
            progress.advance(task)
    
    console.print(f"[green]✓[/green] Processed {len(files)} files")


@cli.command()
@click.option('--format', '-f', type=click.Choice(['json', 'yaml', 'csv']))
@click.option('--output', '-o', type=click.Path(), help='Output file')
def export(format, output):
    """Export data in various formats"""
    table = Table(title="Export Summary")
    table.add_column("Format", style="cyan")
    table.add_column("Output", style="green")
    table.add_row(format.upper(), output or "stdout")
    
    console.print(table)


if __name__ == '__main__':
    cli()
''',
                "Main CLI application with rich output"
            )
        ]
        
        self._build_project_structure()
        self._calculate_statistics()
        
        return {
            "preview_generated": True,
            "files": self.file_previews,
            "structure": self.project_structure,
            "statistics": self.statistics,
            "tech_stack": self.tech_stack,
            "features": self.features
        }
    
    def _preview_general_project(self, task_description: str) -> Dict[str, Any]:
        """Generate preview for general project"""
        # Fallback for general projects
        self.tech_stack = ["Python", "FastAPI", "PostgreSQL"]
        self.features = ["Modular architecture", "Testing setup", "Documentation"]
        
        self.file_previews = [
            FilePreview(
                "src/main.py",
                "# Main application code would go here\n",
                "Main application entry point"
            ),
            FilePreview(
                "README.md",
                f"# {task_description}\n\nGenerated by vibe.ai",
                "Project documentation"
            )
        ]
        
        self._build_project_structure()
        self._calculate_statistics()
        
        return {
            "preview_generated": True,
            "files": self.file_previews,
            "structure": self.project_structure,
            "statistics": self.statistics,
            "tech_stack": self.tech_stack,
            "features": self.features
        }
    
    def _build_project_structure(self):
        """Build project directory structure from file previews"""
        self.project_structure = {}
        
        for file_preview in self.file_previews:
            parts = Path(file_preview.path).parts
            current = self.project_structure
            
            for part in parts[:-1]:
                if part not in current:
                    current[part] = {}
                current = current[part]
            
            # Add file
            current[parts[-1]] = {
                "type": "file",
                "size": file_preview.size_estimate,
                "description": file_preview.description
            }
    
    def _calculate_statistics(self):
        """Calculate project statistics"""
        total_files = len(self.file_previews)
        total_size = sum(f.size_estimate for f in self.file_previews)
        
        file_types = {}
        for f in self.file_previews:
            ext = Path(f.path).suffix or 'no extension'
            file_types[ext] = file_types.get(ext, 0) + 1
        
        self.statistics = {
            "total_files": total_files,
            "total_size": total_size,
            "file_types": file_types,
            "directories": self._count_directories(self.project_structure)
        }
    
    def _count_directories(self, structure: Dict) -> int:
        """Count directories in structure"""
        count = 0
        for key, value in structure.items():
            if isinstance(value, dict) and value.get("type") != "file":
                count += 1 + self._count_directories(value)
        return count
    
    def show_preview(self, task_description: str):
        """Show interactive preview"""
        # Check if we're in non-interactive mode
        if not sys.stdin.isatty():
            self._non_interactive_preview(task_description)
            return
            
        if RICH_AVAILABLE:
            self._rich_preview(task_description)
        else:
            self._simple_preview(task_description)
    
    def _non_interactive_preview(self, task_description: str):
        """Non-interactive preview for piped/redirected output"""
        # Analyze the task first
        preview_data = self.analyze_task(task_description)
        
        if RICH_AVAILABLE:
            console.print(f"\n[bold]Solution Preview for:[/bold] {task_description}\n")
            console.print(f"[bold]Technology Stack:[/bold] {' '.join(self.tech_stack)}")
            console.print(f"\n[bold]Directory Structure:[/bold]")
            self._show_file_structure()
            console.print(f"\n[bold]Total Files:[/bold] {len(self.file_previews)}")
            console.print(f"\n[yellow]This is a preview only. To create the solution, run with -o option.[/yellow]")
        else:
            print(f"\nSolution Preview for: {task_description}\n")
            print(f"Technology Stack: {' '.join(self.tech_stack)}")
            print(f"\nDirectory Structure:")
            # Simple structure display without rich
            for file_preview in self.file_previews:
                print(f"  - {file_preview.path}")
            print(f"\nTotal Files: {len(self.file_previews)}")
            print(f"\nThis is a preview only. To create the solution, run with -o option.")
    
    def _rich_preview(self, task_description: str):
        """Rich interactive preview"""
        console.clear()
        
        # Header
        header = f"""
# 👁️ Solution Preview

Let me show you exactly what vibe.ai will create for:
[cyan]{task_description}[/cyan]

This is a preview only - no files will be created yet.
"""
        console.print(Panel(Markdown(header), border_style="cyan"))
        
        # Generate preview
        with console.status("Analyzing requirements...", spinner="dots"):
            preview_data = self.analyze_task(task_description)
        
        # Show overview
        self._show_overview()
        
        # Show file structure
        self._show_file_structure()
        
        # Show file previews
        self._show_file_previews()
        
        # Show statistics
        self._show_statistics()
        
        # Ask to proceed
        console.print("\n[bold green]Ready to build this?[/bold green]")
        if Confirm.ask("Create this solution now?"):
            output_dir = Prompt.ask("Output directory", default="preview-project")
            console.print(f"\n[cyan]To build this, run:[/cyan]")
            console.print(f'[dim]python3 vibe.py "{task_description}" -o {output_dir}[/dim]')
    
    def _show_overview(self):
        """Show project overview"""
        console.print("\n[bold]📋 Project Overview[/bold]\n")
        
        # Tech stack
        tech_badges = " ".join([f"[cyan]{tech}[/cyan]" for tech in self.tech_stack])
        console.print(f"[bold]Technology Stack:[/bold] {tech_badges}")
        
        # Features
        console.print("\n[bold]Features:[/bold]")
        feature_cols = [f"• {feat}" for feat in self.features]
        console.print(Columns(feature_cols, equal=True, expand=True))
    
    def _show_file_structure(self):
        """Show directory structure"""
        console.print("\n[bold]📁 Directory Structure[/bold]\n")
        
        tree = Tree("📁 project/")
        self._add_structure_to_tree(tree, self.project_structure)
        console.print(tree)
    
    def _add_structure_to_tree(self, parent: Tree, structure: Dict, level: int = 0):
        """Add structure to tree recursively"""
        for name, content in sorted(structure.items()):
            if isinstance(content, dict) and content.get("type") == "file":
                # It's a file
                size = content.get("size", 0)
                size_str = f" [dim]({self._format_size(size)})[/dim]" if size > 0 else ""
                icon = "📄" if name.endswith('.md') else "📜"
                parent.add(f"{icon} {name}{size_str}")
            else:
                # It's a directory
                dir_branch = parent.add(f"📁 {name}/")
                self._add_structure_to_tree(dir_branch, content, level + 1)
    
    def _format_size(self, size: int) -> str:
        """Format file size"""
        if size < 1024:
            return f"{size}B"
        elif size < 1024 * 1024:
            return f"{size / 1024:.1f}KB"
        else:
            return f"{size / (1024 * 1024):.1f}MB"
    
    def _show_file_previews(self):
        """Show previews of key files"""
        console.print("\n[bold]📄 File Previews[/bold]\n")
        
        # Show first 3 code files
        code_files = [f for f in self.file_previews if f.file_type == "code"][:3]
        
        for file_preview in code_files:
            # Show only first 15 lines
            lines = file_preview.content.split('\n')[:15]
            truncated = len(file_preview.content.split('\n')) > 15
            preview_content = '\n'.join(lines)
            if truncated:
                preview_content += "\n# ... more code ..."
            
            syntax = Syntax(
                preview_content, 
                file_preview.get_language(),
                theme="monokai",
                line_numbers=True
            )
            
            console.print(Panel(
                syntax,
                title=f"📄 {file_preview.path}",
                subtitle=file_preview.description,
                border_style="blue"
            ))
    
    def _show_statistics(self):
        """Show project statistics"""
        console.print("\n[bold]📊 Project Statistics[/bold]\n")
        
        stats_table = Table(show_header=False, box=box.SIMPLE)
        stats_table.add_column("Metric", style="cyan")
        stats_table.add_column("Value", style="green")
        
        stats_table.add_row("Total Files", str(self.statistics["total_files"]))
        stats_table.add_row("Total Size", self._format_size(self.statistics["total_size"]))
        stats_table.add_row("Directories", str(self.statistics["directories"]))
        
        # File types
        file_types_str = ", ".join([
            f"{ext}: {count}" for ext, count in 
            sorted(self.statistics["file_types"].items())
        ])
        stats_table.add_row("File Types", file_types_str)
        
        console.print(stats_table)
    
    def _simple_preview(self, task_description: str):
        """Simple preview for non-rich terminals"""
        print(f"\n👁️ Solution Preview")
        print("=" * 50)
        print(f"\nTask: {task_description}")
        
        # Generate preview
        preview_data = self.analyze_task(task_description)
        
        print("\n📋 Overview:")
        print(f"Tech Stack: {', '.join(self.tech_stack)}")
        print("\nFeatures:")
        for feat in self.features:
            print(f"  • {feat}")
        
        print("\n📁 Files to be created:")
        for fp in self.file_previews:
            print(f"  • {fp.path} ({self._format_size(fp.size_estimate)})")
        
        print("\n📊 Statistics:")
        print(f"  Total Files: {self.statistics['total_files']}")
        print(f"  Total Size: {self._format_size(self.statistics['total_size'])}")


def main():
    """Main entry point for previewer"""
    import sys
    
    if len(sys.argv) > 1:
        task = " ".join(sys.argv[1:])
    else:
        task = "Build a REST API with authentication"
    
    previewer = SolutionPreviewer()
    previewer.show_preview(task)


if __name__ == "__main__":
    main()