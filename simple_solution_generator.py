#!/usr/bin/env python3
"""
Simple Complete Solution Generator - Working Demo
"""

import os
import json
from datetime import datetime
from domain_knowledge_base import DomainKnowledgeBase
from code_generation_templates import CodeGenerationTemplates


def generate_complete_solution(description: str, output_dir: str):
    """Generate a complete solution from description"""
    
    print(f"\n🚀 vibe.ai Complete Solution Generator")
    print("=" * 70)
    print(f"\n📝 Project: {description}")
    print(f"📁 Output: {output_dir}")
    print("\n" + "=" * 70)
    
    # Initialize components
    kb = DomainKnowledgeBase()
    templates = CodeGenerationTemplates()
    
    # Phase 1: Understanding
    print("\n🧠 Phase 1: Understanding Requirements...")
    
    # Detect domains
    domains = kb.detect_domains(description)
    print(f"\n📊 Detected domains: {', '.join(domains) if domains else 'general'}")
    
    # Get implicit requirements
    implicit_reqs = kb.get_implicit_requirements(domains)
    print(f"\n🔍 Implicit requirements ({len(implicit_reqs)}):")
    for req in list(implicit_reqs)[:5]:
        print(f"  • {req}")
    if len(implicit_reqs) > 5:
        print(f"  • ... and {len(implicit_reqs) - 5} more")
    
    # Get technology recommendations
    tech_recs = kb.get_technology_recommendations(domains)
    print(f"\n💻 Technology recommendations:")
    for category, techs in list(tech_recs.items())[:5]:
        print(f"  • {category}: {', '.join(list(techs)[:3])}")
    
    # Phase 2: Generate Solution Structure
    print(f"\n\n📋 Phase 2: Generating Solution Structure...")
    
    # Create output directory
    os.makedirs(output_dir, exist_ok=True)
    
    # Determine project type
    if "api" in description.lower() or "backend" in description.lower():
        project_type = "api"
        framework = "python_fastapi"
    elif "chat" in description.lower() or "real-time" in description.lower():
        project_type = "realtime"
        framework = "python_fastapi"
    else:
        project_type = "web"
        framework = "python_fastapi"
    
    print(f"\n🏗️  Project type: {project_type}")
    print(f"🛠️  Framework: {framework}")
    
    # Phase 3: Generate Code
    print(f"\n\n⚙️  Phase 3: Generating Code...")
    
    # Create project structure
    dirs = [
        "src",
        "src/api",
        "src/models", 
        "src/services",
        "src/utils",
        "tests",
        "tests/unit",
        "tests/integration",
        "docs",
        "scripts"
    ]
    
    for dir_name in dirs:
        os.makedirs(os.path.join(output_dir, dir_name), exist_ok=True)
    
    # Generate main.py
    main_code = '''"""
Main Application
Auto-generated by vibe.ai
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

app = FastAPI(
    title="Generated API",
    description="Auto-generated by vibe.ai Complete Solution Engine",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "API is running", "status": "healthy"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
'''
    
    with open(os.path.join(output_dir, "src", "main.py"), 'w') as f:
        f.write(main_code)
    print("  ✅ Generated src/main.py")
    
    # Generate a sample model using templates
    if "user" in str(implicit_reqs) or "authentication" in str(implicit_reqs):
        # Generate user model
        user_model = templates.generate_code("python_fastapi", "model", {
            "resource_name": "User",
            "table_name": "users",
            "fields": '''name = Column(String(100), nullable=False)
    email = Column(String(255), unique=True, nullable=False, index=True)
    password_hash = Column(String(255), nullable=False)
    is_active = Column(Boolean, default=True)
    is_verified = Column(Boolean, default=False)
    last_login = Column(DateTime, nullable=True)''',
            "relationships": '''# Relationships
    posts = relationship("Post", back_populates="author")
    messages = relationship("Message", back_populates="sender")''',
            "dict_fields": '''"name": self.name,
            "email": self.email,
            "is_active": self.is_active,
            "is_verified": self.is_verified,''',
            "relationship_data": '''if include_relationships:
            data["posts"] = [p.to_dict() for p in self.posts[:10]]'''
        })
        
        if user_model:
            with open(os.path.join(output_dir, "src", "models", "user.py"), 'w') as f:
                f.write(user_model)
            print("  ✅ Generated src/models/user.py")
    
    # Generate requirements.txt
    requirements = [
        "fastapi==0.104.1",
        "uvicorn[standard]==0.24.0",
        "sqlalchemy==2.0.23",
        "pydantic==2.5.0",
        "python-jose[cryptography]==3.3.0",
        "passlib[bcrypt]==1.7.4",
        "python-multipart==0.0.6",
        "redis==5.0.1",
        "httpx==0.25.2",
        "pytest==7.4.3",
        "pytest-asyncio==0.21.1"
    ]
    
    # Add domain-specific requirements
    if "real-time" in description.lower() or "chat" in description.lower():
        requirements.extend(["websockets==12.0", "python-socketio==5.10.0"])
    
    if "video" in description.lower():
        requirements.append("aiortc==1.6.0")
    
    with open(os.path.join(output_dir, "requirements.txt"), 'w') as f:
        f.write("\n".join(requirements))
    print("  ✅ Generated requirements.txt")
    
    # Generate Dockerfile
    dockerfile = templates.generate_code("docker", "dockerfile", {
        "app_name": "generated-app"
    })
    
    if dockerfile:
        with open(os.path.join(output_dir, "Dockerfile"), 'w') as f:
            f.write(dockerfile)
        print("  ✅ Generated Dockerfile")
    
    # Generate docker-compose.yml
    docker_compose = templates.generate_code("docker", "compose", {
        "app_name": "generated-app"
    })
    
    if docker_compose:
        with open(os.path.join(output_dir, "docker-compose.yml"), 'w') as f:
            f.write(docker_compose)
        print("  ✅ Generated docker-compose.yml")
    
    # Generate README
    readme = f"""# {description}

Generated by vibe.ai Complete Solution Engine

## Features

### Explicit Features
- {description}

### Implicit Features (Auto-detected)
{chr(10).join(f"- {req}" for req in list(implicit_reqs)[:10])}

## Technology Stack

{chr(10).join(f"- **{cat.title()}**: {', '.join(list(techs)[:3])}" for cat, techs in tech_recs.items())}

## Quick Start

1. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

2. Run with Docker:
   ```bash
   docker-compose up
   ```

3. Or run directly:
   ```bash
   python src/main.py
   ```

4. Access API:
   - API: http://localhost:8000
   - Docs: http://localhost:8000/docs

## Project Structure

```
{output_dir}/
├── src/
│   ├── main.py          # Main application
│   ├── api/             # API routes
│   ├── models/          # Data models
│   ├── services/        # Business logic
│   └── utils/           # Utilities
├── tests/               # Test suite
├── docs/                # Documentation
├── Dockerfile           # Container definition
├── docker-compose.yml   # Development environment
└── requirements.txt     # Python dependencies
```

## Development

Run tests:
```bash
pytest
```

## Generated by vibe.ai

This project was automatically generated based on your description.
Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    with open(os.path.join(output_dir, "README.md"), 'w') as f:
        f.write(readme)
    print("  ✅ Generated README.md")
    
    # Generate .gitignore
    gitignore = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.env
.venv

# IDE
.vscode/
.idea/
*.swp
*.swo

# Testing
.pytest_cache/
.coverage
htmlcov/

# Docker
*.log

# OS
.DS_Store
Thumbs.db

# Project
uploads/
temp/
"""
    
    with open(os.path.join(output_dir, ".gitignore"), 'w') as f:
        f.write(gitignore)
    print("  ✅ Generated .gitignore")
    
    # Phase 4: Summary
    print(f"\n\n✅ Phase 4: Solution Generated!")
    print("=" * 70)
    
    print(f"\n📊 Summary:")
    print(f"  • Detected domains: {len(domains)}")
    print(f"  • Implicit requirements: {len(implicit_reqs)}")
    print(f"  • Files generated: 7+")
    print(f"  • Ready to run: Yes")
    
    print(f"\n🚀 Next Steps:")
    print(f"  1. cd {output_dir}")
    print(f"  2. docker-compose up")
    print(f"  3. Open http://localhost:8000/docs")
    
    print(f"\n💡 The system automatically:")
    print(f"  • Detected you need: {', '.join(list(implicit_reqs)[:3])}...")
    print(f"  • Selected best technologies for your use case")
    print(f"  • Generated production-ready code structure")
    print(f"  • Added Docker configuration for easy deployment")


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("Usage: python3 simple_solution_generator.py \"description\" [output_dir]")
        print("\nExamples:")
        print('  python3 simple_solution_generator.py "Build a chat app" my-chat')
        print('  python3 simple_solution_generator.py "Create task management API" task-api')
        sys.exit(1)
    
    description = sys.argv[1]
    output_dir = sys.argv[2] if len(sys.argv) > 2 else "generated-solution"
    
    generate_complete_solution(description, output_dir)